# MIT License
# Copyright (c) 2025 Madara273 <ravenhoxs@gmail.com>

# --- –Ü–º–ø–æ—Ä—Ç–∏ ---
import os
import re
import uuid
import glob
import asyncio
import logging
import traceback
import urllib.parse

from aiogram import Router
from aiogram import Bot
from aiogram.filters import Command
from aiogram.types import (
	Message,
	CallbackQuery,
	InlineKeyboardButton,
	InlineKeyboardMarkup,
	FSInputFile
)

from yt_dlp.utils import DownloadError
import yt_dlp

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è ---
qdl_router = Router()
TMP_DIR = "tmp_downloads"
os.makedirs(TMP_DIR, exist_ok=True)

logger = logging.getLogger(__name__)
logging.getLogger("yt_dlp").setLevel(logging.CRITICAL)

# --- –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è ---
MAX_FILE_SIZE = 50 * 1024 * 1024  # 50 –ú–ë
prompt_messages = {} # –ó–±–µ—Ä–µ–≥—Ç–∏ message_id –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
pending_queries = {} # –ó–±–µ—Ä–µ–≥—Ç–∏ –∑–∞–ø–∏—Ç–∏, –ø–æ–≤'—è–∑–∞–Ω—ñ –∑ query_id –¥–ª—è –∫–æ–ª–±–µ–∫—ñ–≤
pattern_tiktok_photo = re.compile(r"https?://(?:www\.)?tiktok.com/.+/photo/?")

# --- –ö–ª–∞—Å –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ª–æ–≥–µ—Ä–∞ –¥–ª—è yt_dlp ---
class MyLogger:
	def debug(self, msg):
		pass

	def warning(self, msg):
		if "Falling back on generic information extractor" in msg or \
		   "yt-dlp is not a command" in msg:
			return
		logging.warning(f"YTDLP Warning: {msg}")

	def error(self, msg):
		if "Unsupported URL" in msg:
			return
		logging.error(f"YTDLP Error: {msg}")

# --- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ URL ---
def is_unsupported_url(url: str) -> bool:
	try:
		parsed = urllib.parse.urlparse(url)
		if "tiktok.com" in url:
			if "/photo/" in parsed.path:
				return True
			query_params = urllib.parse.parse_qs(parsed.query)
			if query_params.get("aweme_type", [""])[0] == "150":
				return True
		return False
	except Exception as e:
		logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ URL: {e}")
		return False

# --- –ë–µ–∑–ø–µ—á–Ω–∞ —Å–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —á–µ—Ä–µ–∑ yt_dlp ---
def safe_extract_info(url):
	if is_unsupported_url(url):
		return {"message": "–í–∏–±–∞—á—Ç–µ, –∞–ª–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è TikTok —Ñ–æ—Ç–æ/—Å—Ç–æ—Ä—ñ—Å –Ω–∞—Ä–∞–∑—ñ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è.", "url": url}

	ydl_opts = {
		'logger': MyLogger(),
		'quiet': True,
		'no_warnings': True,
		'force_generic_extractor': True,
	}

	ydl = yt_dlp.YoutubeDL(ydl_opts)
	try:
		return ydl.extract_info(url, download=False)
	except DownloadError as e:
		if "Unsupported URL" in str(e):
			return {"message": "URL –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è a–±–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–µ –¥—ñ–π—Å–Ω–µ.", "url": url}
		logging.error(f"Yt-dlp DownloadError –ø—ñ–¥ —á–∞—Å extract_info: {e}")
		return {"message": "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –π–æ–≥–æ.", "url": url}
	except Exception as e:
		logging.error(f"–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å extract_info: {e}")
		return {"message": "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–µ.", "url": url}

# --- –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /qdl ---
@qdl_router.message(Command("qdl"))
async def cmd_qdl(message: Message, bot: Bot):
	parts = message.text.strip().split(maxsplit=1)
	uid = message.from_user.id
	await message.delete()

	if len(parts) != 2:
		warn_msg = await message.answer(
			"‚ÑπÔ∏è    –í–∫–∞–∂–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∞–±–æ –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏. –ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n"
			"`/qdl https://tiktok.com/...` –∞–±–æ `/qdl never gonna give you up`",
			parse_mode="Markdown"
		)
		await asyncio.sleep(5)
		await warn_msg.delete()
		return

	query = parts[1].strip()
	query_id = str(uuid.uuid4())
	pending_queries[query_id] = query

	keyboard = InlineKeyboardMarkup(inline_keyboard=[
		[
			InlineKeyboardButton(text="üé• –í—ñ–¥–µ–æ", callback_data=f"qdl_video|{query_id}"),
			InlineKeyboardButton(text="üéµ –ê—É–¥—ñ–æ", callback_data=f"qdl_audio|{query_id}")
		]
	])

	prompt_msg = await message.answer("‚¨áÔ∏è –û–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:", reply_markup=keyboard)
	prompt_messages[uid] = prompt_msg.message_id

	# –í–∏–¥–∞–ª–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥
	async def auto_delete_buttons():
		await asyncio.sleep(15)
		if prompt_messages.get(uid) == prompt_msg.message_id:
			try:
				await bot.delete_message(message.chat.id, prompt_msg.message_id)
			except Exception as e:
				logging.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏ ({prompt_msg.message_id}): {e}")
			finally:
				prompt_messages.pop(uid, None)

	asyncio.create_task(auto_delete_buttons())

# --- –û–±—Ä–æ–±–∫–∞ callback –∫–Ω–æ–ø–æ–∫ —Ñ–æ—Ä–º–∞—Ç—É ---
@qdl_router.callback_query(lambda c: c.data and c.data.startswith("qdl_"))
async def process_qdl_callback(query: CallbackQuery, bot: Bot):
	uid = query.from_user.id
	data = query.data
	action, query_id = data.split("|", maxsplit=1)
	input_text = pending_queries.pop(query_id, None)

	prompt_msg_id = prompt_messages.pop(uid, None)
	if prompt_msg_id:
		try:
			await bot.delete_message(query.message.chat.id, prompt_msg_id)
		except Exception as e:
			logging.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –ø—ñ—Å–ª—è callback: {e}")

	if not input_text:
		await query.message.answer("‚ö†Ô∏è –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–µ–¥—ñ–π—Å–Ω–µ –∞–±–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª–µ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
		await query.answer()
		return

	status_msg = await query.message.answer("‚è¨ –¢—Ä–∏–≤–∞—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...")
	await query.answer()

	# –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ—à—É–∫–æ–≤–æ–≥–æ –∞–±–æ –ø—Ä—è–º–æ–≥–æ –∑–∞–ø–∏—Ç—É
	search_query = input_text if re.match(r'https?://', input_text) else f"ytsearch:{input_text}"

	# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É
	info_check = safe_extract_info(search_query)
	if isinstance(info_check, dict) and "message" in info_check:
		await status_msg.edit_text(f"‚ö†Ô∏è {info_check['message']}")
		await asyncio.sleep(5)
		await status_msg.delete()
		return

	video_id = str(uuid.uuid4())
	output_template = os.path.join(TMP_DIR, f"{video_id}.%(ext)s")

	# –ó–∞–≥–∞–ª—å–Ω—ñ –æ–ø—Ü—ñ—ó
	base_opts = {
		'outtmpl': output_template,
		'default_search': 'ytsearch',
		'nocheckcertificate': True,
		'quiet': True,
		'restrictfilenames': True,
		'noplaylist': True,
	}

	# –§–æ—Ä–º–∞—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
	if action == "qdl_video":
		ydl_opts = {
			**base_opts,
			'format': 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/bestvideo+bestaudio/best',
			'postprocessors': [
				{'key': 'FFmpegVideoConvertor', 'preferedformat': 'mp4'},
				{'key': 'FFmpegMetadata'}
			]
		}
	else: # qdl_audio
		ydl_opts = {
			**base_opts,
			'format': 'bestaudio/best',
			'postprocessors': [
				{'key': 'FFmpegExtractAudio', 'preferredcodec': 'mp3', 'preferredquality': '192'},
				{'key': 'FFmpegMetadata'}
			]
		}

	try:
		# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
		loop = asyncio.get_event_loop()
		await loop.run_in_executor(None, lambda: yt_dlp.YoutubeDL(ydl_opts).download([search_query]))

		matches = glob.glob(os.path.join(TMP_DIR, f"{video_id}.*"))
		if not matches:
			await status_msg.edit_text("üòï –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ñ–∞–π–ª. –ü–µ—Ä–µ–≤—ñ—Ä –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∞–±–æ –∑–∞–ø–∏—Ç.")
			await asyncio.sleep(5)
			await status_msg.delete()
			return

		output_file = matches[0]
		if not os.path.exists(output_file) or os.path.getsize(output_file) == 0:
			await status_msg.edit_text("üòï –§–∞–π–ª –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–≤—Å—è –∞–±–æ –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π. –°–ø—Ä–æ–±—É–π —ñ–Ω—à–∏–π.")
			await asyncio.sleep(5)
			await status_msg.delete()
			return

		if os.path.getsize(output_file) > MAX_FILE_SIZE:
			await status_msg.edit_text(
				f"üìÅ –§–∞–π–ª –∑–∞–≤–µ–ª–∏–∫–∏–π (> {MAX_FILE_SIZE / (1024 * 1024):.0f} –ú–ë). –°–ø—Ä–æ–±—É–π —ñ–Ω—à–∏–π."
			)
			await asyncio.sleep(3)
			await status_msg.delete()
		else:
			input_file = FSInputFile(output_file)
			await bot.send_document(query.message.chat.id, input_file)
			await status_msg.delete()

	except yt_dlp.utils.DownloadError as e:
		error_text = str(e)
		logging.error(f"Yt-dlp DownloadError: {error_text}", exc_info=True)
		if "Unsupported URL" in error_text:
			await status_msg.edit_text("‚ö†Ô∏è –¶–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è (–º–æ–∂–ª–∏–≤–æ, —Ñ–æ—Ç–æ/—Å—Ç–æ—Ä—ñ—Å, –ø—Ä—è–º–∏–π –µ—Ñ—ñ—Ä, –∞–±–æ –ø—Ä–∏–≤–∞—Ç–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç).")
		elif "ERROR: Private video" in error_text:
			await status_msg.edit_text("‚ö†Ô∏è –¶–µ –ø—Ä–∏–≤–∞—Ç–Ω–µ –≤—ñ–¥–µ–æ —ñ –π–æ–≥–æ –Ω–µ–º–æ–∂–ª–∏–≤–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏.")
		elif "ERROR: This video is unavailable" in error_text:
			await status_msg.edit_text("‚ö†Ô∏è –¶–µ –≤—ñ–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ.")
		else:
			await status_msg.edit_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π —ñ–Ω—à–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∞–±–æ –ø—ñ–∑–Ω—ñ—à–µ.")
		await asyncio.sleep(5)
		await status_msg.delete()

	except Exception as e:
		logging.error(f"–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {e}", exc_info=True)
		await status_msg.edit_text("‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ —ñ–Ω—à–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è.")
		await asyncio.sleep(5)
		await status_msg.delete()

	finally:
		# –û—á–∏—Å—Ç–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏
		for file in glob.glob(os.path.join(TMP_DIR, f"{video_id}.*")):
			try:
				os.remove(file)
			except Exception as e:
				logging.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª {file}: {e}")
