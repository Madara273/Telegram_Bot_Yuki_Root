# MIT License
# Copyright (c) 2025 Madara273 <ravenhoxs@gmail.com>

# --- –Ü–º–ø–æ—Ä—Ç–∏ ---
import time
import asyncio
import contextlib
import logging
import aiohttp
import config
import signal

from aiogram import Bot, Dispatcher, Router
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramNetworkError, RestartingTelegram
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError

from magic import magic_router
from waifu import waifu_router
from ai_router import yuki_router, init_db, DB_NAME
from qdl import qdl_router
from gen_router import gen_router

# --- –Ü–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑ config ---
BOT_TOKEN = config.BOT_TOKEN

bot = Bot(
	token=BOT_TOKEN,
	default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
# --- –î–∏—Å–ø–µ—Ç—á–µ—Ä–∏ —Ç–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω—ñ —Ä–æ—É—Ç–µ—Ä–∏ ---
dp = Dispatcher(storage=MemoryStorage())
main_router = Router()

dp.include_router(gen_router)
dp.include_router(main_router)
dp.include_router(magic_router)
dp.include_router(qdl_router)
dp.include_router(waifu_router)
dp.include_router(yuki_router)

# --- –õ–æ–≥—É–≤–∞–Ω–Ω—è ---
logging.basicConfig(
	level=logging.INFO,
	format="%(asctime)s [%(levelname)s] %(message)s"
)
logger = logging.getLogger(__name__)

# --- –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ ---
@main_router.message(Command("start"))
async def cmd_start(message: Message):
	try:
		await message.delete()
	except (TelegramBadRequest, TelegramForbiddenError) as e:
		logger.debug(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ /start –≤—ñ–¥ {message.from_user.id}: {e}")

	text = (
		"üëã <b>–ü—Ä–∏–≤—ñ—Ç! –Ø ‚Äî Yuki, —Ç–≤—ñ–π –ø–æ–º—ñ—á–Ω–∏–∫ —É —Å–≤—ñ—Ç—ñ root-—ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤, AI —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—å</b>\n\n"
		"üõ† <b>Yuki-—ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏:</b>\n"
		"‚Ä¢ /magisk ‚Äî –æ—Å—Ç–∞–Ω–Ω—è –≤–µ—Ä—Å—ñ—è Magisk\n"
		"‚Ä¢ /ksu_next ‚Äî KernelSU-Next\n"
		"‚Ä¢ /modules ‚Äî Magisk-–º–æ–¥—É–ª—ñ\n\n"
		"ü§ñ <b>AI-–ø–æ–º—ñ—á–Ω–∏–∫:</b>\n"
		"‚Ä¢ /get_yuki ‚Äî Yuki-–∞—Å–∏—Å—Ç–µ–Ω—Ç\n"
		"‚Ä¢ /reset_yuki - –°–∫–∏–Ω—É—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é —á–∞—Ç—É\n"
		"‚Ä¢ /gen - –ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è\n"
		"‚Ä¢ /sleep ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Å–µ—Å—ñ—é Yuki\n\n"
		"üìΩ <b>–ú–µ–¥—ñ–∞:</b>\n"
		"‚Ä¢ /qdl ‚Äî –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ YouTube, TikTok\n\n"
		"üì° <b>–°—Ç–∞–Ω:</b>\n"
		"‚Ä¢ /ping ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–≤'—è–∑–æ–∫\n\n"
		"‚úÖ –ó–∞–≤–∂–¥–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –≤–µ—Ä—Å—ñ—ó!"
	)

	try:
		await message.answer(text, parse_mode="HTML")
	except TelegramBadRequest as e:
		if "not enough rights to send text messages" in str(e):
			logger.warning("–û–π, –∑–¥–∞—î—Ç—å—Å—è, —è –Ω–µ –º–∞—é –ø—Ä–∞–≤ –ø–∏—Å–∞—Ç–∏ –≤ —Ü–µ–π —á–∞—Ç, –∑–≤–µ—Ä–Ω–∏—Å—å –¥–æ –∞–¥–º—ñ–Ω–∞")
	except Exception:
		pass

# --- –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ Ping ---
@main_router.message(Command("ping"))
async def ping_handler(message: Message):
	try:
		await message.delete()
	except TelegramBadRequest as e:
		if "message can't be deleted" in str(e):
			logger.warning("–û–π, –Ω–µ –º–æ–∂—É –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚Äî –≤–æ–Ω–æ –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–µ –∞–±–æ –Ω–µ–º–∞ –ø—Ä–∞–≤")
		else:
			logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
	except TelegramForbiddenError:
		logger.warning("–ù–µ–º–∞ –ø—Ä–∞–≤ –Ω–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")

	start = time.perf_counter()

	try:
		sent_msg = await message.answer("üèì –ü–µ—Ä–µ–≤—ñ—Ä—è—é –∑–≤'—è–∑–æ–∫‚Ä¶")
	except TelegramRetryAfter as e:
		retry_after = e.retry_after or 10
		logger.warning(f"Flood control ü´£ ‚Äî —á–µ–∫–∞—é {retry_after} —Å–µ–∫...")
		await asyncio.sleep(retry_after)
		sent_msg = await message.answer("üèì –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ –ø—ñ—Å–ª—è flood control‚Ä¶")

	end = time.perf_counter()
	ping_ms = round((end - start) * 1000, 2)

	await sent_msg.edit_text(
		f"‚úÖ –Ø –ø—Ä–∞—Ü—é—é!\nüì∂ –ü—ñ–Ω–≥: <b>{ping_ms} –º—Å</b>",
		parse_mode="HTML"
	)

# --- –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ –Ω–µ—Å—Ç–∞–±—ñ–ª—å–Ω–∏—Ö –º–µ—Ä–µ–∂ ---
async def run_polling():
	logger.info(f"–°–ø—Ä–æ–±–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {DB_NAME}")
	try:
		await init_db()
		logger.info("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞/–ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ.")
	except Exception as e:
		logger.critical(f"–ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –±–∞–∑—É –¥–∞–Ω–∏—Ö. –ë–æ—Ç –Ω–µ –∑–º–æ–∂–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –±–µ–∑ –Ω–µ—ó. –î–µ—Ç–∞–ª—ñ: {e}")

		return

	while True:
		try:
			logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞‚Ä¶")
			await dp.start_polling(bot)
			logger.info("‚úÖ Polling –∑–∞–≤–µ—Ä—à–µ–Ω–æ –±–µ–∑ –ø–æ–º–∏–ª–æ–∫.")
			break
		except (aiohttp.ClientConnectorError, TelegramNetworkError, asyncio.TimeoutError) as net_err:
			logger.warning(f"[–ú–µ—Ä–µ–∂–∞] –í—Ç—Ä–∞—á–µ–Ω–æ –∑'—î–¥–Ω–∞–Ω–Ω—è: {net_err}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 10 —Å–µ–∫...")
			await asyncio.sleep(10)
		except RestartingTelegram as restart:
			logger.info(f"[Telegram] –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: {restart}")
			await asyncio.sleep(5)
		except asyncio.CancelledError:
			logger.info("üõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è. –ó–∞–≤–µ—Ä—à—É—î–º–æ polling.")
			break
		except Exception as e:
			logger.exception(f"[–§–∞—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞] {e}")
			await asyncio.sleep(5)

# --- –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ ---
async def shutdown(loop, polling_task):
	logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è: –∑—É–ø–∏–Ω–∏—Ç–∏ polling‚Ä¶")
	polling_task.cancel()
	with contextlib.suppress(asyncio.CancelledError):
		await polling_task
	await bot.session.close()
	logger.info("‚úÖ –°–µ—Å—ñ—é –±–æ—Ç–∞ –∑–∞–∫—Ä–∏—Ç–æ.")
	loop.stop()
	logger.info("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∫–æ—Ä–µ–∫—Ç–Ω–æ.")

# --- –ó–∞–ø—É—Å–∫ —ñ –æ–±—Ä–æ–±–∫–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è ---
async def main():
	loop = asyncio.get_running_loop()

	polling_task = asyncio.create_task(run_polling())

	for sig in (signal.SIGINT, signal.SIGTERM):
		loop.add_signal_handler(sig, lambda s=sig: asyncio.create_task(shutdown(loop, polling_task)))

	try:
		await polling_task
	except asyncio.CancelledError:
		pass

if __name__ == "__main__":
	try:
		asyncio.run(main())
	except KeyboardInterrupt:
		logger.info("‚õîÔ∏è KeyboardInterrupt ‚Äî –≤–∏—Ö—ñ–¥.")
