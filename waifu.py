# MIT License
# Copyright (c) 2025 Madara273

# --- –Ü–º–ø–æ—Ä—Ç–∏ ---
import os
import random
import logging
import json
from asyncio import sleep
from time import time
from aiogram import Router, Bot, types
from aiogram.filters import Command
from aiogram.types import FSInputFile
from aiogram.exceptions import TelegramForbiddenError
from waifupics import waifu_sfw, waifu_nsfw
import config

logger = logging.getLogger(__name__)
waifu_router = Router()

# --- –ü–∞–ø–∫–∞ –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º–∏ ---
WAIFU_FOLDER = os.path.join(os.getcwd(), config.WAIFU_FOLDER)
os.makedirs(WAIFU_FOLDER, exist_ok=True)

# --- –ö–µ—à –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ ---
authorized_users: dict[int, float] = {}

# --- –®–ª—è—Ö –¥–æ JSON-—Ñ–∞–π–ª—É –∑ —ñ—Å—Ç–æ—Ä—ñ—î—é ---
WAIFU_HISTORY_FILE = os.path.join(WAIFU_FOLDER, "sent_waifus.json")

# --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –Ω–∞–¥—Å–∏–ª–∞–Ω—å ---
def load_sent_history() -> dict[int, set[str]]:
	if os.path.exists(WAIFU_HISTORY_FILE):
		try:
			with open(WAIFU_HISTORY_FILE, "r", encoding="utf-8") as f:
				raw = json.load(f)
				return {int(k): set(v) for k, v in raw.items()}
		except Exception as e:
			logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é waifu: {e}")
	return {}

# --- –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –Ω–∞–¥—Å–∏–ª–∞–Ω—å ---
def save_sent_history():
	try:
		with open(WAIFU_HISTORY_FILE, "w", encoding="utf-8") as f:
			json.dump({str(k): list(v) for k, v in sent_waifus_per_user.items()}, f, indent=2, ensure_ascii=False)
	except Exception as e:
		logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é waifu: {e}")

# --- –Ü—Å—Ç–æ—Ä—ñ—è –Ω–∞–¥—Å–∏–ª–∞–Ω—å ---
sent_waifus_per_user: dict[int, set[str]] = load_sent_history()

# --- –û—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω—å ---
def get_random_local_waifu(folder: str, user_id: int) -> str | None:
	try:
		files = [f for f in os.listdir(folder) if f.lower().endswith(config.SUPPORTED_IMAGE_FORMATS)]
		if not files:
			logger.info(f"–ù–µ–º–∞—î –∑–æ–±—Ä–∞–∂–µ–Ω—å —É –ø–∞–ø—Ü—ñ: {folder}")
			return None

		sent = sent_waifus_per_user.get(user_id, set())
		available = list(set(files) - sent)

		if not available:
			logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –æ—Ç—Ä–∏–º–∞–≤ —É—Å—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è. –°–∫–∏–¥–∞—î–º–æ —Å–ø–∏—Å–æ–∫.")
			sent_waifus_per_user[user_id] = set()
			available = files

		chosen = random.choice(available)
		sent_waifus_per_user.setdefault(user_id, set()).add(chosen)
		save_sent_history()
		return os.path.join(folder, chosen)
	except Exception as e:
		logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø—ñ –¥–æ –ø–∞–ø–∫–∏ {folder}: {e}")
		return None

# --- –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /waifu ---
@waifu_router.message(Command("waifu"))
async def waifu_cmd(message: types.Message, bot: Bot, is_internal_call: bool = False):
	user_id = message.from_user.id
	text = message.text.strip().split(maxsplit=2)
	password = text[1] if len(text) > 1 else ""
	mode = text[2].lower() if len(text) > 2 else "sfw"  # sfw –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º

	if not is_internal_call:
		try:
			await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
			logger.info(f"–í–∏–¥–∞–ª–∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /waifu –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} (ID: {message.message_id}).")
		except TelegramForbiddenError:
			logger.warning("–ë–æ—Ç –Ω–µ –º–∞—î –ø—Ä–∞–≤ –Ω–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.")
		except Exception as e:
			logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {message.message_id}: {e}")

	now = time()
	if user_id in authorized_users and (now - authorized_users[user_id]) < config.WAIFU_TIMEOUT:
		pass
	elif password == config.WAIFU_PASSWORD:
		authorized_users[user_id] = now
	else:
		if not is_internal_call:
			try:
				warn = await message.answer("–í–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å: `/waifu <–ø–∞—Ä–æ–ª—å> [sfw|nsfw]`", parse_mode="MarkdownV2")
				await sleep(4)
				await warn.delete()
			except Exception as e:
				logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å: {e}")
		else:
			logger.error(f"–í–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –≤–∏–∫–ª–∏–∫ waifu_cmd –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ %d –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤ —á–µ—Ä–µ–∑ –Ω–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å.", user_id)
		return

	# NSFW —Ç—ñ–ª—å–∫–∏ —É –ø—Ä–∏–≤–∞—Ç—ñ
	if mode == "nsfw" and message.chat.type != "private":
		await message.answer("NSFW –º–æ–∂–Ω–∞ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö üò≥")
		return

	file_path = get_random_local_waifu(WAIFU_FOLDER, user_id)
	if file_path:
		try:
			await message.answer_photo(FSInputFile(file_path))
			return
		except Exception as e:
			logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")

	# --- API SFW/NSFW ---
	try:
		url = await (waifu_nsfw() if mode == "nsfw" else waifu_sfw())
		if url:
			await message.answer(f'<a href="{url}">–î—ñ–≤—á–∏–Ω–∞</a>', parse_mode="HTML")
		else:
			raise ValueError("–ü–æ—Ä–æ–∂–Ω—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∑ API")
	except Exception as e:
		logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑ API: {e}")

		if not is_internal_call:
			try:
				error_msg = await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.")
				await sleep(2)
				await error_msg.delete()
			except Exception as e:
				logger.warning(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–æ–º–∏–ª–∫–∏: {e}")
