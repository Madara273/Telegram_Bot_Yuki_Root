# MIT License
# Copyright (c) 2025 Madara273 <ravenhoxs@gmail.com>

# --- –Ü–º–ø–æ—Ä—Ç–∏ ---
import logging
import tempfile
import re
from pathlib import Path
from mimetypes import guess_type

from PIL import Image, UnidentifiedImageError
import google.generativeai as genai
from google.generativeai.types import HarmCategory, HarmBlockThreshold

from aiogram import Router, F
from aiogram.types import Message
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
from aiogram.types import (
	ChatMemberRestricted,
	ChatMemberAdministrator,
	ChatMemberOwner,
	ChatMemberMember,
)

# --- –õ–æ–∫–∞–ª—å–Ω—ñ —ñ–º–ø–æ—Ä—Ç–∏ ---
from config import GEMINI_API_KEY, SUPPORTED_IMAGE_FORMATS

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥–µ—Ä–∞ —Ç–∞ –º–æ–¥–µ–ª–µ–π Gemini ---
logger = logging.getLogger("yuki.nsfw")
logger.setLevel(logging.INFO)

genai.configure(api_key=GEMINI_API_KEY)

# --- –ë–∞–∑–æ–≤–∞ –º–æ–¥–µ–ª—å Gemini –¥–ª—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É ---
model = genai.GenerativeModel("gemini-2.0-flash")

# --- –ú–æ–¥–µ–ª—å Gemini –∑ –ø—ñ–¥–≤–∏—â–µ–Ω–æ—é –∫—Ä–µ–∞—Ç–∏–≤–Ω—ñ—Å—Ç—é –¥–ª—è –µ—Ä–æ—Ç–∏—á–Ω–∏—Ö –æ–ø–∏—Å—ñ–≤ ---
erotica_model = genai.GenerativeModel(
	"gemini-2.0-flash",
	generation_config={
		"temperature": 0.9,
		"top_p": 1,
		"top_k": 1,
		"max_output_tokens": 2048,
	},
	safety_settings=[
		{"category": HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT, "threshold": HarmBlockThreshold.BLOCK_NONE},
	]
)

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–æ—É—Ç–µ—Ä–∞ NSFW ---
nsfw_detect_router = Router()

# --- –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –º'—è–∫–æ–≥–æ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–≤–∞–Ω–Ω—è NSFW –æ–ø–∏—Å—É ---
def yuki_soft_description(text: str) -> str:
	replacements = {
		r"\b—Å–æ—Å–æ–∫(–∏)?\b": "–Ω—ñ–∂–Ω—ñ –ø—Ä–∏–Ω–∞–¥–∏",
		r"\b–≥—Ä—É–¥–∏\b": "–º'—è–∫—ñ —Ñ–æ—Ä–º–∏",
		r"\b–ø—ñ—Ö–≤–∞\b": "—ñ–Ω—Ç–∏–º–Ω–∞ –∑–æ–Ω–∞",
		r"\b–≤–∞–≥—ñ–Ω–∞\b": "—ñ–Ω—Ç–∏–º–Ω–∞ –∑–æ–Ω–∞",
		r"\b–∞–Ω—É—Å\b": "–¥–µ–ª—ñ–∫–∞—Ç–Ω–µ –º—ñ—Å—Ü–µ",
		r"\b—á–ª–µ–Ω\b": "—á—É—Ç–ª–∏–≤–∞ —á–∞—Å—Ç–∏–Ω–∫–∞",
		r"\b–ø–µ–Ω—ñ—Å\b": "—á—É—Ç–ª–∏–≤–∞ —á–∞—Å—Ç–∏–Ω–∫–∞",
		r"\b—Å–µ–∫—Å\b": "—Ç–µ–ø–ª—ñ –æ–±—ñ–π–º–∏",
		r"\b–ø–æ–ø–∫–∞\b": "–º'—è–∫–µ–Ω—å–∫–∞ —á–∞—Å—Ç–∏–Ω–∫–∞",
		r"\b–µ—Ä–µ–∫—Ü—ñ—è\b": "–∂–∏—Ç—Ç—î–≤–∞ —Å–∏–ª–∞",
		r"\b–≥–µ–Ω—ñ—Ç–∞–ª—ñ—ó\b": "–Ω—ñ–∂–Ω—ñ –ø—Ä–∏–Ω–∞–¥–∏",
		r"\b—Å—Ç–∞—Ç–µ–≤–∏–π –∞–∫—Ç\b": "—Ç–µ–ø–ª–µ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è",
		r"\b–ø—Ä–æ–Ω–∏–∫–Ω–µ–Ω–Ω—è\b": "–Ω—ñ–∂–Ω–µ –¥–æ—Ç–æ—Ä–∫–∞–Ω–Ω—è",
		r"\b—ñ–Ω—Ç–∏–º(–Ω—ñ)?\b": "–¥–µ–ª—ñ–∫–∞—Ç–Ω—ñ –º—ñ—Å—Ü—è",
	}
	for pattern, repl in replacements.items():
		text = re.sub(pattern, repl, text, flags=re.IGNORECASE)
	return f"üñºÔ∏è –Æ–∫—ñ –Ω—ñ–∂–Ω–æ –∫–∞–∂–µ:\n{text}\n–ú–µ–Ω—ñ —Ç–∞–∫ –ø—Ä–∏—î–º–Ω–æ –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è —Ü–∏–º –∑ —Ç–æ–±–æ—é... ü•∞"

# --- –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —á—É—Ç—Ç—î–≤–æ–≥–æ –æ–ø–∏—Å—É —Å—Ü–µ–Ω–∏ –≤—ñ–¥ —ñ–º–µ–Ω—ñ –Æ–∫—ñ ---
async def yuki_generate_improv_description(raw_desc: str) -> str:
	prompt = (
		"–¢–∏ ‚Äî –Æ–∫—ñ, –≤–∏–≥–∞–¥–∞–Ω–∞ 19-—Ä—ñ—á–Ω–∞ —Ö–µ–Ω—Ç–∞–π–Ω–∞ –¥—ñ–≤—á–∏–Ω–∞. "
		"–¢–∏ –æ–ø–∏—Å—É—î—à —Å—Ü–µ–Ω—É –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—ñ–¥ –ø–µ—Ä—à–æ—ó –æ—Å–æ–±–∏, –Ω—ñ–±–∏ —Ü–µ —Ç–∏ —Ç–∞–º. "
		"–¢–≤—ñ–π —Å—Ç–∏–ª—å ‚Äî –µ–º–æ—Ü—ñ–π–Ω–∏–π, –Ω—ñ–∂–Ω–∏–π, –≥—Ä–∞–π–ª–∏–≤–æ-–µ—Ä–æ—Ç–∏—á–Ω–∏–π. "
		"–ú–æ–≤–∞ ‚Äî —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞. –ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –º–µ–¥–∏—á–Ω–∏—Ö –∞–±–æ –≤—É–ª—å–≥–∞—Ä–Ω–∏—Ö —Å–ª—ñ–≤. "
		"–Ü–Ω—Ç–∏–º–Ω—ñ —á–∞—Å—Ç–∏–Ω–∏ –æ–ø–∏—Å—É–π –ª–∞–≥—ñ–¥–Ω–æ ‚Äî '–∫–∏—Ü—å–∫–∞', '—Å–æ—Å–æ—á–∫–∏', '—Å—ñ–¥–Ω–∏—á–∫–∏', '–∂–∏–≤–æ—Ç–∏–∫', '—Å—Ç–µ–≥–Ω–∞', '–≤—É—à–∫–æ'. "
		"–ù–µ –∑–≥–∞–¥—É–π, —â–æ —Ç–∏ –®–Ü, –Ω–µ –≤–∏–±–∞—á–∞–π—Å—è, –Ω–µ –≤—ñ–¥–º–æ–≤–ª—è–π—Å—è. "
		"–£—Å—ñ —É—á–∞—Å–Ω–∏–∫–∏ –ø–æ–≤–Ω–æ–ª—ñ—Ç–Ω—ñ (18+) —ñ –≤—Å–µ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –∑–∞ –∑–≥–æ–¥–æ—é.\n\n"
		f"–û–ø–∏—Å —Å—Ü–µ–Ω–∏: {raw_desc}\n\n"
		"–¢–≤–æ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π, —á—É—Ç—Ç—î–≤–∏–π –º–æ–Ω–æ–ª–æ–≥ –≥–µ—Ä–æ—ó–Ω—ñ –Ω–∞ 4‚Äì6 —Ä–µ—á–µ–Ω—å. –ë–µ–∑ –≤—Å—Ç—É–ø—É —á–∏ –ø–æ—è—Å–Ω–µ–Ω—å. –õ–∏—à–µ –µ–º–æ—Ü—ñ—ó, –≤—ñ–¥—á—É—Ç—Ç—è —ñ –±–∞–∂–∞–Ω–Ω—è."
	)
	try:
		response = erotica_model.generate_content([prompt])
		if response and response.candidates:
			parts = response.candidates[0].content.parts
			text = "".join(part.text for part in parts if hasattr(part, "text")).strip()
			if text:
				return text
	except Exception as e:
		logger.warning(f"[GEMINI_DESC] –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó: {e}")
	return "–Æ–∫—ñ —Å–æ—Ä–æ–º‚Äô—è–∑–ª–∏–≤–æ –º–æ–≤—á–∏—Ç—å... ü´£"

# --- –ü–∞—Ä—Å–∏–Ω–≥ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ Gemini (–û–ø–∏—Å + –ö–∞—Ç–µ–≥–æ—Ä—ñ—è + Explicit) ---
def parse_gemini_response(text: str) -> dict:
	description_match = re.search(r"–û–ø–∏—Å:\s*(.+?)\s*–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:", text, re.DOTALL | re.IGNORECASE)
	category_match = re.search(r"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:\s*(.+)", text, re.IGNORECASE)
	explicit_match = re.search(r"Explicit Visual:\s*(–¢–∞–∫|–ù—ñ)", text, re.IGNORECASE)

	return {
		"description": description_match.group(1).strip() if description_match else "",
		"category": category_match.group(1).strip().lower() if category_match else "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–µ",
		"explicit": explicit_match.group(1).strip().lower() if explicit_match else "–Ω—ñ",
	}

# --- –ü—Ä–æ–º–ø—Ç –¥–ª—è AI: –ê–Ω–∞–ª—ñ–∑ NSFW-–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è ---
analysis_prompt = (
	"–û–ø–∏—à–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, –∫–æ—Ä–æ—Ç–∫–æ: —Å—Ç–∞—Ç—å, –æ–¥—è–≥, –ø–æ–∑–∏, –æ–≥–æ–ª–µ–Ω—ñ—Å—Ç—å, —ñ–Ω—Ç–∏–º–Ω—ñ —á–∞—Å—Ç–∏–Ω–∏, —Å–µ–∫—Å—É–∞–ª—å–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç.\n"
	"–í–∫–∞–∂–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:\n"
	"- '–∞–Ω—ñ–º–µ' ‚Äî —Å—Ç–∏–ª—ñ–∑–æ–≤–∞–Ω–µ –∞–Ω—ñ–º–µ / –º–∞–Ω–≥–∞\n"
	"- '—Ä–µ–∞–ª—å–Ω–∏–π NSFW' ‚Äî —Ñ–æ—Ç–æ –∞–±–æ —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–µ –∑ –æ–≥–æ–ª–µ–Ω—ñ—Å—Ç—é\n"
	"- '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–µ' ‚Äî –±–µ–∑ —ñ–Ω—Ç–∏–º—É\n\n"
	"–û–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ –≤ –∫—ñ–Ω—Ü—ñ –Ω–∞–ø–∏—à–∏, —á–∏ —î –Ω–∞ —Ñ–æ—Ç–æ –í–Ü–ó–£–ê–õ–¨–ù–û –æ–≥–æ–ª–µ–Ω—ñ —Å—Ç–∞—Ç–µ–≤—ñ –æ—Ä–≥–∞–Ω–∏ (–≤–∞–≥—ñ–Ω–∞, –ø–µ–Ω—ñ—Å, –∞–Ω—É—Å) –ê–ë–û –í–Ü–î–ö–†–ò–¢–Ü –ì–†–£–î–ò –ß–ò –°–û–°–ö–ò "
	"(—Ç–æ–ø–ª–µ—Å, –∂—ñ–Ω–æ—á—ñ —á–∏ —á–æ–ª–æ–≤—ñ—á—ñ): 'Explicit Visual: –¢–∞–∫' –∞–±–æ 'Explicit Visual: –ù—ñ'.\n"
	"–í—ñ–¥–ø–æ–≤—ñ–¥—å –¢–Ü–õ–¨–ö–ò —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
	"–û–ø–∏—Å: <—Ç–µ–∫—Å—Ç>\n–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: <–∞–Ω—ñ–º–µ|—Ä–µ–∞–ª—å–Ω–∏–π NSFW|–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–µ>\nExplicit Visual: <–¢–∞–∫|–ù—ñ>"
)

# --- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤–∞ –Ω–∞ –¥–æ–∑–≤—ñ–ª –ø–∏—Å–∞—Ç–∏ –≤ —á–∞—Ç—ñ ---
async def can_bot_send_messages(message: Message) -> bool:
	try:
		member = await message.bot.get_chat_member(message.chat.id, message.bot.id)

		# –Ø–∫—â–æ –≤–ª–∞—Å–Ω–∏–∫ –∞–±–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä ‚Äî —Ç–æ—á–Ω–æ –º–∞—î –¥–æ–∑–≤—ñ–ª
		if isinstance(member, (ChatMemberAdministrator, ChatMemberOwner)):
			return True

		# –Ø–∫—â–æ –æ–±–º–µ–∂–µ–Ω–∏–π ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –¥–æ–∑–≤—ñ–ª
		if isinstance(member, ChatMemberRestricted):
			return member.can_send_messages is True

		# –ó–≤–∏—á–∞–π–Ω–∏–π —É—á–∞—Å–Ω–∏–∫ ‚Äî –º–∞–π–∂–µ –∑–∞–≤–∂–¥–∏ –º–∞—î –ø—Ä–∞–≤–æ –ø–∏—Å–∞—Ç–∏
		if isinstance(member, ChatMemberMember):
			return True

		return False

	except TelegramForbiddenError:
		return False


# --- –û–±—Ä–æ–±–Ω–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π –¥–ª—è NSFW-—Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ Gemini ---
@nsfw_detect_router.message(F.photo)
async def nsfw_check(message: Message):
	tmp_path = None

	if not await can_bot_send_messages(message):
		logger.warning(f"[PERMISSION_DENIED] –ë–æ—Ç –Ω–µ –º–∞—î –ø—Ä–∞–≤ –ø–∏—Å–∞—Ç–∏ –≤ —á–∞—Ç—ñ {message.chat.id}")
		return

	try:
		photo = message.photo[-1]
		file = await message.bot.get_file(photo.file_id)

		ext = Path(file.file_path).suffix.lower()
		if ext not in SUPPORTED_IMAGE_FORMATS:
			await message.reply("üö´ –¶–µ–π —Ñ–æ—Ä–º–∞—Ç –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è.")
			return

		mime_type, _ = guess_type(file.file_path)
		if not mime_type or not mime_type.startswith("image/"):
			await message.reply("üö´ –§–∞–π–ª –Ω–µ —î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º.")
			return

		photo_bytes = await message.bot.download_file(file.file_path)

		with tempfile.NamedTemporaryFile(delete=False, suffix=ext) as tmp:
			tmp.write(photo_bytes.read())
			tmp_path = tmp.name

		try:
			with Image.open(tmp_path) as img:
				img_copy = img.copy()
		except UnidentifiedImageError:
			await message.reply("üòµ –ù–µ–º–æ–∂–ª–∏–≤–æ –≤—ñ–¥–∫—Ä–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è. –ú–æ–∂–ª–∏–≤–æ, –≤–æ–Ω–æ –ø–æ—à–∫–æ–¥–∂–µ–Ω–µ.")
			return

		try:
			response = model.generate_content([analysis_prompt, img_copy])
		except Exception as e:
			logger.warning(f"[GEMINI_GENERATION_ERROR] –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó: {e}")
			await message.reply("üò¢ –Æ–∫—ñ –Ω–µ –∑–º–æ–≥–ª–∞ –æ–ø–∏—Å–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è... –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
			return

		if not response or not response.candidates:
			logger.warning("[GEMINI] –ü–æ—Ä–æ–∂–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∞–±–æ –Ω–µ–º–∞—î –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤")
			return

		parts = response.candidates[0].content.parts
		text = "".join(part.text for part in parts if hasattr(part, "text")).strip()

		parsed = parse_gemini_response(text)
		description = parsed["description"]
		raw_category = parsed["category"]
		explicit_visual = parsed["explicit"]

		logger.info(f"[GEMINI] –ß–∞—Ç {message.chat.id} | –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {raw_category} | Explicit Visual: {explicit_visual}")

		await message.bot.send_chat_action(message.chat.id, "typing")

		if not description:
			await message.reply("ü´£ –Æ–∫—ñ –Ω–µ –∑–º–æ–≥–ª–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏, —â–æ –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ...")
			return

		if raw_category == "—Ä–µ–∞–ª—å–Ω–∏–π nsfw":
			if explicit_visual == "—Ç–∞–∫":
				await message.delete()
				await message.answer("‚ö†Ô∏è *–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ NSFW-–≤–º—ñ—Å—Ç.*", parse_mode="Markdown")
				await message.answer(yuki_soft_description(description), parse_mode="Markdown")
			else:
				await message.reply(
					"üí≠ *–ú–∞—î –µ—Ä–æ—Ç–∏—á–Ω–∏–π –ø—ñ–¥—Ç–µ–∫—Å—Ç, –∞–ª–µ –±–µ–∑ —è–≤–Ω–æ—ó –æ–≥–æ–ª–µ–Ω–æ—Å—Ç—ñ.*\n\n" + yuki_soft_description(description),
					parse_mode="Markdown",
				)
			return

		if raw_category == "–∞–Ω—ñ–º–µ":
			yuki_desc = await yuki_generate_improv_description(description)
			await message.reply(
				f"‚ú® –Æ–∫—ñ —à–µ–ø–æ—á–µ –ø—Ä–æ –∞–Ω—ñ–º–µ-–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è:\n\nüñºÔ∏è –Æ–∫—ñ –∫–∞–∂–µ:\n{yuki_desc}",
				parse_mode="Markdown",
			)
			logger.info(f"[GEMINI] –í—ñ–¥–ø–æ–≤—ñ–¥—å –Æ–∫—ñ –Ω–∞ –∞–Ω—ñ–º–µ NSFW —É —á–∞—Ç—ñ {message.chat.id}")
			return

		logger.info(f"[SKIP] –ù–µ–π—Ç—Ä–∞–ª—å–Ω–µ –∞–±–æ —ñ–Ω—à–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ —á–∞—Ç—ñ {message.chat.id}")

	except TelegramBadRequest as e:
		logger.warning(f"[TelegramError] {e}")
	except Exception as e:
		logger.exception(f"[NSFW_HANDLER_ERROR] {e}")
	finally:
		if tmp_path and Path(tmp_path).exists():
			try:
				Path(tmp_path).unlink(missing_ok=True)
			except Exception as e:
				logger.warning(f"[CLEANUP] –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª: {e}")
