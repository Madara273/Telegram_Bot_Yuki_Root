# MIT License
# Copyright (c) 2025 Madara273 <ravenhoxs@gmail.com>

# --- –Ü–º–ø–æ—Ä—Ç–∏ ---
import tempfile
import os
from aiogram import Router, F
from aiogram.types import Message, BufferedInputFile
from aiogram.exceptions import TelegramAPIError
from google import genai
from google.genai import types
import logging
from datetime import datetime, timedelta
from collections import defaultdict

from config import GEMINI_API_KEY, MAX_GENERATIONS, TIME_LIMIT_MINUTES

gen_router = Router()
client = genai.Client(api_key=GEMINI_API_KEY)

user_limits = defaultdict(list)
TIME_LIMIT = timedelta(minutes=TIME_LIMIT_MINUTES)

@gen_router.message(F.text.startswith("/gen "))
async def generate_image(message: Message):
	user_id = message.from_user.id

	now = datetime.now()
	user_limits[user_id] = [t for t in user_limits[user_id] if now - t < TIME_LIMIT]

	if len(user_limits[user_id]) >= MAX_GENERATIONS:
		time_left = (user_limits[user_id][0] + TIME_LIMIT - now).seconds // 60
		await message.reply(
			"‚ú® –û–π-–æ–π... –Æ–∫—ñ –≤–∂–µ —Å—Ç–æ–º–∏–ª–∞—Å—å –º–∞–ª—é–≤–∞—Ç–∏! ‚ú®\n"
			f"–ó–∞—Ä–∞–∑ –º–æ–∂–Ω–∞ —Ç—ñ–ª—å–∫–∏ {MAX_GENERATIONS} –∫–∞—Ä—Ç–∏–Ω–æ–∫ –Ω–∞ {TIME_LIMIT_MINUTES} —Ö–≤–∏–ª–∏–Ω.\n"
			f"–î–∞–≤–∞–π —Ç—Ä–æ—Ö–∏ –≤—ñ–¥–ø–æ—á–∏–Ω–µ–º–æ? –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ {time_left} —Ö–≤–∏–ª–∏–Ω–æ–∫! üíñ\n"
			"–ê –ø–æ–∫–∏ –º–æ–∂–µ—à –ø–æ–≥—Ä–∞—Ç–∏—Å—å –∑ —ñ–Ω—à–∏–º–∏ –º–æ—ó–º–∏ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏~"
		)
		return

	try:
		user_prompt = message.text[5:].strip()
		if not user_prompt:
			await message.reply("‚ùó –í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å –ø—ñ—Å–ª—è /gen")
			return

		await message.chat.do("upload_photo")

		response = client.models.generate_images(
			model="imagen-4.0-ultra-generate-preview-06-06",
			prompt=user_prompt,
			config=types.GenerateImagesConfig(
				number_of_images=1
			)
		)

		if not response.generated_images:
			await message.reply("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
			return

		user_limits[user_id].append(now)

		generated_image = response.generated_images[0]
		tmp_file_path = None

		try:
			with tempfile.NamedTemporaryFile(delete=False, suffix=".png") as tmp_file:
				tmp_file_path = tmp_file.name
				generated_image.image.save(tmp_file_path)

			with open(tmp_file_path, "rb") as file:
				await message.answer_photo(
					photo=BufferedInputFile(file.read(), filename="generated.png"),
					caption=f"{user_prompt}",
					parse_mode="Markdown"
				)

		except Exception as e:
			logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏: {e}", exc_info=True)
			await message.reply("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")

		finally:
			if tmp_file_path and os.path.exists(tmp_file_path):
				try:
					os.remove(tmp_file_path)
				except Exception as e:
					logging.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª: {e}")

	except TelegramAPIError as e:
		logging.error(f"–ü–æ–º–∏–ª–∫–∞ Telegram: {e}")
		await message.reply("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏")

	except Exception as e:
		logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó: {e}")
		await message.reply("–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
