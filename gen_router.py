# MIT License
# Copyright (c) 2025 Madara273 <ravenhoxs@gmail.com>

# --- –Ü–º–ø–æ—Ä—Ç–∏ ---
import os
import tempfile
import asyncio
import logging
from datetime import datetime, timedelta
from collections import defaultdict

from aiogram import Router, F
from aiogram.types import Message, BufferedInputFile
from aiogram.exceptions import TelegramAPIError, TelegramForbiddenError

from google import genai
from google.genai import types

from config import GEMINI_API_KEY, MAX_GENERATIONS, TIME_LIMIT_MINUTES

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è ---
logging.basicConfig(
	level=logging.INFO,
	format="%(asctime)s - %(levelname)s - %(message)s",
	datefmt="%Y-%m-%d %H:%M:%S"
)

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è ---
gen_router = Router()
client = genai.Client(api_key=GEMINI_API_KEY)
user_limits = defaultdict(list)
TIME_LIMIT = timedelta(minutes=TIME_LIMIT_MINUTES)

# --- –ë–µ–∑–ø–µ—á–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ –ª–æ–≥—É–≤–∞–Ω–Ω—è–º ---
async def safe_delete(msg: Message, description: str, user_id: int):
	"""
	–í–∏–¥–∞–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –ª–æ–≥—É—î –¥—ñ—é.
	–Ø–∫—â–æ –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–±–æ –≤–∏–Ω–∏–∫–∞—î –ø–æ–º–∏–ª–∫–∞ ‚Äî –ª–æ–≥—É—î –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –∞–±–æ –ø–æ–º–∏–ª–∫—É.
	"""
	try:
		await msg.delete()
		logging.info(f"–í–∏–¥–∞–ª–µ–Ω–æ: {description} | user_id={user_id} | msg_id={msg.message_id}")
	except TelegramForbiddenError:
		logging.warning(f"–ù–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: {description} | user_id={user_id} | msg_id={msg.message_id}")
	except Exception as e:
		logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ ({description}) | user_id={user_id} | msg_id={msg.message_id} | {e}")

# --- –ü–æ—è—Å–Ω–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ /gen ---
@gen_router.message(F.text == "/gen")
async def gen_help(message: Message):
	"""
	–í–∏–¥–∞–ª—è—î –∫–æ–º–∞–Ω–¥—É –º–∏—Ç—Ç—î–≤–æ, –∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥.
	"""
	await safe_delete(message, "–ö–æ–º–∞–Ω–¥–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (/gen) –º–∏—Ç—Ç—î–≤–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è", message.from_user.id)

	msg = await message.answer(
		"*‚ûü –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è*\n"
		"–í–∫–∞–∂–∏ –æ–ø–∏—Å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏.\n"
		"–ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n"
		"`/gen –∫—Ä–∞—Å–∏–≤–∞ –∞–Ω—ñ–º–µ –¥—ñ–≤—á–∏–Ω–∞`\n"
		"–Ü —è –Ω–∞–º–∞–ª—é—é –¥–ª—è —Ç–µ–±–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞ —Ü–∏–º –æ–ø–∏—Å–æ–º!",
		parse_mode="Markdown"
	)
	await asyncio.sleep(5)
	await safe_delete(msg, "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—î—é (/gen)", message.from_user.id)

# --- –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞ –ø—Ä–æ–º–ø—Ç–æ–º ---
@gen_router.message(F.text.startswith("/gen "))
async def generate_image(message: Message):
	"""
	–ì–µ–Ω–µ—Ä—É—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–º –æ–ø–∏—Å–æ–º –ø—ñ—Å–ª—è /gen.
	–ü–µ—Ä–µ–≤—ñ—Ä—è—î –æ–±–º–µ–∂–µ–Ω–Ω—è –Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü—ñ–π –∑–∞ —á–∞—Å.
	"""
	user_id = message.from_user.id

	# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ª—ñ–º—ñ—Ç—ñ–≤
	if user_id not in user_limits:
		user_limits[user_id] = []

	# –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö —Ç–∞–π–º—à—Ç–∞–º–ø—ñ–≤
	now = datetime.now()
	user_limits[user_id] = [t for t in user_limits[user_id] if now - t < TIME_LIMIT]

	# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ–º—ñ—Ç—É
	if len(user_limits[user_id]) >= MAX_GENERATIONS:
		time_left = TIME_LIMIT_MINUTES
		if user_limits[user_id]:
			time_left = max(0, (user_limits[user_id][0] + TIME_LIMIT - now).seconds // 60)

		msg = await message.answer(
			"‚ú® –û–π-–æ–π... –Æ–∫—ñ –≤–∂–µ —Å—Ç–æ–º–∏–ª–∞—Å—å –º–∞–ª—é–≤–∞—Ç–∏! ‚ú®\n"
			f"–ó–∞—Ä–∞–∑ –º–æ–∂–Ω–∞ —Ç—ñ–ª—å–∫–∏ {MAX_GENERATIONS} –∫–∞—Ä—Ç–∏–Ω–æ–∫ –Ω–∞ {TIME_LIMIT_MINUTES} —Ö–≤–∏–ª–∏–Ω.\n"
			f"–î–∞–≤–∞–π —Ç—Ä–æ—Ö–∏ –≤—ñ–¥–ø–æ—á–∏–Ω–µ–º–æ? –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ {time_left} —Ö–≤–∏–ª–∏–Ω–æ–∫! üíñ\n"
			"–ê –ø–æ–∫–∏ –º–æ–∂–µ—à –ø–æ–≥—Ä–∞—Ç–∏—Å—å –∑ —ñ–Ω—à–∏–º–∏ –º–æ—ó–º–∏ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏"
		)
		await asyncio.sleep(7)

		# –û–¥–Ω–æ—á–∞—Å–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
		await asyncio.gather(
			safe_delete(msg, "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞ (–ª—ñ–º—ñ—Ç)", user_id),
			safe_delete(message, "–ö–æ–º–∞–Ω–¥–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–ª—ñ–º—ñ—Ç)", user_id)
		)
		return

	try:
		# –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–º–ø—Ç
		user_prompt = message.text[5:].strip()
		if not user_prompt:
			msg = await message.answer("‚ùó –í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å –ø—ñ—Å–ª—è /gen")
			await asyncio.sleep(5)
			await asyncio.gather(
				safe_delete(msg, "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É (–ø–æ—Ä–æ–∂–Ω—ñ–π –ø—Ä–æ–º–ø—Ç)", user_id),
				safe_delete(message, "–ö–æ–º–∞–Ω–¥–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–ø–æ—Ä–æ–∂–Ω—ñ–π –ø—Ä–æ–º–ø—Ç)", user_id)
			)
			return

		# –ê–Ω—ñ–º–∞—Ü—ñ—è "–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ"
		await message.chat.do("upload_photo")

		# --- –í–∏–∫–ª–∏–∫ API Gemini ---
		response = client.models.generate_images(
			model="imagen-4.0-ultra-generate-preview-06-06",
			prompt=user_prompt,
			config=types.GenerateImagesConfig(number_of_images=1)
		)

		if not response.generated_images:
			msg = await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
			await asyncio.sleep(5)
			await asyncio.gather(
				safe_delete(msg, "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É (–Ω–µ–º–∞—î –∑–æ–±—Ä–∞–∂–µ–Ω—å)", user_id),
				safe_delete(message, "–ö–æ–º–∞–Ω–¥–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–ø–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó)", user_id)
			)
			return

		user_limits[user_id].append(now)

		# –û–±—Ä–æ–±–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
		generated_image = response.generated_images[0]
		tmp_file_path = None

		try:
			# –ó–±–µ—Ä–µ–≥—Ç–∏ —É —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
			with tempfile.NamedTemporaryFile(delete=False, suffix=".png") as tmp_file:
				tmp_file_path = tmp_file.name
				generated_image.image.save(tmp_file_path)

			# –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
			with open(tmp_file_path, "rb") as file:
				sent_photo = await message.answer_photo(
					photo=BufferedInputFile(file.read(), filename="generated.png")
				)

			# –í–∏–¥–∞–ª–∏—Ç–∏ –ª–∏—à–µ –∫–æ–º–∞–Ω–¥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
			await safe_delete(message, "–ö–æ–º–∞–Ω–¥–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—É—Å–ø—ñ—à–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è)", user_id)

		except Exception as e:
			logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏: {e}", exc_info=True)
			msg = await message.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
			await asyncio.sleep(5)
			await asyncio.gather(
				safe_delete(msg, "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –æ–±—Ä–æ–±–∫–∏", user_id),
				safe_delete(message, "–ö–æ–º–∞–Ω–¥–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–ø–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏)", user_id)
			)

		finally:
			# –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
			if tmp_file_path and os.path.exists(tmp_file_path):
				try:
					os.remove(tmp_file_path)
				except Exception as e:
					logging.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª: {e}")

	except TelegramAPIError as e:
		logging.error(f"–ü–æ–º–∏–ª–∫–∞ Telegram: {e}")
		msg = await message.answer("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏")
		await asyncio.sleep(5)
		await asyncio.gather(
			safe_delete(msg, "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É Telegram", user_id),
			safe_delete(message, "–ö–æ–º–∞–Ω–¥–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–ø–æ–º–∏–ª–∫–∞ Telegram)", user_id)
		)

	except Exception as e:
		logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó: {e}")
		msg = await message.answer("–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
		await asyncio.sleep(5)
		await asyncio.gather(
			safe_delete(msg, "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó", user_id),
			safe_delete(message, "–ö–æ–º–∞–Ω–¥–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–ø–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó)", user_id)
		)
